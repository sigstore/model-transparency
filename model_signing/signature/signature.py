# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""This package provides the functionality to sign models"""
import abc

from in_toto_attestation.v1 import statement
from sigstore_protobuf_specs.dev.sigstore.bundle import v1 as bundle_pb


class VerificationMaterial(metaclass=abc.ABCMeta):
    """Generic verification material"""


class SigstoreVerificationMaterial(VerificationMaterial):
    """
    SigstoreVerificationMaterial supports to conversion to the sigstore
    verification material message.
    """

    @abc.abstractmethod
    def to_sigstore_verification_material(
            self) -> bundle_pb.VerificationMaterial:
        """
        Converts the verification material to the sigstore verification
        material message.

        Returns:
            bundle_pb.VerificationMaterial: Sigstore verification material 
        """


class BytesSigner(abc.ABC):
    """BytesSigner is the abstract base class for signing bytes."""

    @abc.abstractmethod
    def sign(self, data: bytes) -> bytes:
        """Sign signs the provide data.

        Args:
            data (bytes): The data that needs to be signed

        Returns:
            bytes: the signature
        """

    @property
    @abc.abstractmethod
    def verification_material(self) -> VerificationMaterial:
        """
        Returns the verification material needed to verify signatures
        generated by this signer.

        Returns:
            VerificationMaterial: Material used to verify signatures.
        """


class BytesVerifier(metaclass=abc.ABCMeta):
    """
    BytesVerifier is the abstract base class for verifying byte signatures.
    """

    def verify(self, signature: bytes, data: bytes):
        """Verifies the signature matches the data.

        Args:
            signature (bytes): Signature to verify
            data (bytes): Data the signatures was created with.

        Raises:
            ValueError: If the signature verification fails.
        """
